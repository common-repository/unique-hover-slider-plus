{"version":3,"sources":["ResizeSensor.js","ElementQueries.js"],"names":["ResizeSensor","element","callback","EventQueue","this","q","add","ev","push","i","j","call","length","getComputedStyle","prop","currentStyle","window","getPropertyValue","style","attachResizeEvent","resized","resizedAttached","resizeSensor","document","createElement","className","styleChild","cssText","innerHTML","appendChild","fixed","absolute","position","lastWidth","lastHeight","expand","childNodes","expandChild","shrink","reset","width","offsetWidth","height","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","el","name","cb","attachEvent","addEventListener","onScroll","elementType","Object","prototype","toString","isCollectionTyped","jQuery","Elements","detach","removeChild","module","exports","require","ElementQueries","getEmSize","documentElement","fontSize","parseFloat","convertToPx","value","units","replace","clientWidth","clientHeight","vw","vh","chooser","Math","SetupInformation","options","key","option","actualValue","attrValues","attrValue","attrName","addOption","idx","mode","property","join","attributes","hasOwnProperty","indexOf","k","setAttribute","substr","removeAttribute","setupElement","elementQueriesSetupInformation","elementQueriesSensor","trackingActive","elements","queueQuery","selector","allQueries","getQuery","query","querySelectorAll","bind","$$","findElementQueriesElements","attachResponsiveImage","check","imageToDisplay","children","rules","minWidth","defaultImageId","lastActiveImage","loadedImages","display","image","Image","onload","src","sources","tagName","toLowerCase","getAttribute","rule","findResponsiveImages","extractQuery","css","match","smatch","regex","exec","attrs","attrMatch","attrRegex","readRules","type","selectorText","cssRules","defaultCssInjected","init","withTracking","styleSheets","e","getElementsByTagName","update","pop","instance","domLoaded","test","navigator","userAgent","DOMLoadTimer","setInterval","readyState","clearInterval","listen"],"mappings":"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","file":"vendor.min.js","sourcesContent":["/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            var onScroll = function() {\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                  changed();\n              }\n              reset();\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        var elementType = Object.prototype.toString.call(element);\n        var isCollectionTyped = ('[object Array]' === elementType\n            || ('[object NodeList]' === elementType)\n            || ('[object HTMLCollection]' === elementType)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        );\n\n        if (isCollectionTyped) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            if (isCollectionTyped) {\n                var i = 0, j = element.length;\n                for (; i < j; i++) {\n                    ResizeSensor.detach(element[i]);\n                }\n            } else {\n                ResizeSensor.detach(element);\n            }\n        };\n    };\n\n    ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ResizeSensor;\n    }\n    else {\n        window.ResizeSensor = ResizeSensor;\n    }\n\n})();\n","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    var ResizeSensor = window.ResizeSensor;\n\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        ResizeSensor = require('./ResizeSensor');\n    }\n\n    /**\n     *\n     * @type {Function}\n     * @constructor\n     */\n    var ElementQueries = this.ElementQueries = function() {\n\n        var trackingActive = false;\n        var elements = [];\n\n        /**\n         *\n         * @param element\n         * @returns {Number}\n         */\n        function getEmSize(element) {\n            if (!element) {\n                element = document.documentElement;\n            }\n            var fontSize = getComputedStyle(element, 'fontSize');\n            return parseFloat(fontSize) || 16;\n        }\n\n        /**\n         *\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n         *\n         * @param {HTMLElement} element\n         * @param {*} value\n         * @returns {*}\n         */\n        function convertToPx(element, value) {\n            var units = value.replace(/[0-9]*/, '');\n            value = parseFloat(value);\n            switch (units) {\n                case \"px\":\n                    return value;\n                case \"em\":\n                    return value * getEmSize(element);\n                case \"rem\":\n                    return value * getEmSize();\n                // Viewport units!\n                // According to http://quirksmode.org/mobile/tableViewport.html\n                // documentElement.clientWidth/Height gets us the most reliable info\n                case \"vw\":\n                    return value * document.documentElement.clientWidth / 100;\n                case \"vh\":\n                    return value * document.documentElement.clientHeight / 100;\n                case \"vmin\":\n                case \"vmax\":\n                    var vw = document.documentElement.clientWidth / 100;\n                    var vh = document.documentElement.clientHeight / 100;\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n                    return value * chooser(vw, vh);\n                default:\n                    return value;\n                // for now, not supporting physical units (since they are just a set number of px)\n                // or ex/ch (getting accurate measurements is hard)\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @constructor\n         */\n        function SetupInformation(element) {\n            this.element = element;\n            this.options = {};\n            var key, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName;\n\n            /**\n             * @param {Object} option {mode: 'min|max', property: 'width|height', value: '123px'}\n             */\n            this.addOption = function(option) {\n                var idx = [option.mode, option.property, option.value].join(',');\n                this.options[idx] = option;\n            };\n\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\n            /**\n             * Extracts the computed width/height and sets to min/max- attribute.\n             */\n            this.call = function() {\n                // extract current dimensions\n                width = this.element.offsetWidth;\n                height = this.element.offsetHeight;\n\n                attrValues = {};\n\n                for (key in this.options) {\n                    if (!this.options.hasOwnProperty(key)){\n                        continue;\n                    }\n                    option = this.options[key];\n\n                    value = convertToPx(this.element, option.value);\n\n                    actualValue = option.property == 'width' ? width : height;\n                    attrName = option.mode + '-' + option.property;\n                    attrValue = '';\n\n                    if (option.mode == 'min' && actualValue >= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (option.mode == 'max' && actualValue <= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\n                    if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) {\n                        attrValues[attrName] += ' ' + attrValue;\n                    }\n                }\n\n                for (var k in attributes) {\n                    if(!attributes.hasOwnProperty(k)) continue;\n\n                    if (attrValues[attributes[k]]) {\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n                    } else {\n                        this.element.removeAttribute(attributes[k]);\n                    }\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {Object}      options\n         */\n        function setupElement(element, options) {\n            if (element.elementQueriesSetupInformation) {\n                element.elementQueriesSetupInformation.addOption(options);\n            } else {\n                element.elementQueriesSetupInformation = new SetupInformation(element);\n                element.elementQueriesSetupInformation.addOption(options);\n                element.elementQueriesSensor = new ResizeSensor(element, function() {\n                    element.elementQueriesSetupInformation.call();\n                });\n            }\n            element.elementQueriesSetupInformation.call();\n\n            if (trackingActive && elements.indexOf(element) < 0) {\n                elements.push(element);\n            }\n        }\n\n        /**\n         * @param {String} selector\n         * @param {String} mode min|max\n         * @param {String} property width|height\n         * @param {String} value\n         */\n        var allQueries = {};\n        function queueQuery(selector, mode, property, value) {\n            if (typeof(allQueries[mode]) == 'undefined') allQueries[mode] = {};\n            if (typeof(allQueries[mode][property]) == 'undefined') allQueries[mode][property] = {};\n            if (typeof(allQueries[mode][property][value]) == 'undefined') allQueries[mode][property][value] = selector;\n            else allQueries[mode][property][value] += ','+selector;\n        }\n\n        function getQuery() {\n            var query;\n            if (document.querySelectorAll) query = document.querySelectorAll.bind(document);\n            if (!query && 'undefined' !== typeof $$) query = $$;\n            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n            if (!query) {\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n            }\n\n            return query;\n        }\n\n        /**\n         * Start the magic. Go through all collected rules (readRules()) and attach the resize-listener.\n         */\n        function findElementQueriesElements() {\n            var query = getQuery();\n\n            for (var mode in allQueries) if (allQueries.hasOwnProperty(mode)) {\n\n                for (var property in allQueries[mode]) if (allQueries[mode].hasOwnProperty(property)) {\n                    for (var value in allQueries[mode][property]) if (allQueries[mode][property].hasOwnProperty(value)) {\n                        var elements = query(allQueries[mode][property][value]);\n                        for (var i = 0, j = elements.length; i < j; i++) {\n                            setupElement(elements[i], {\n                                mode: mode,\n                                property: property,\n                                value: value\n                            });\n                        }\n                    }\n                }\n\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         */\n        function attachResponsiveImage(element) {\n            var children = [];\n            var rules = [];\n            var sources = [];\n            var defaultImageId = 0;\n            var lastActiveImage = -1;\n            var loadedImages = [];\n\n            for (var i in element.children) {\n                if(!element.children.hasOwnProperty(i)) continue;\n\n                if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {\n                    children.push(element.children[i]);\n\n                    var minWidth = element.children[i].getAttribute('min-width') || element.children[i].getAttribute('data-min-width');\n                    //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');\n                    var src = element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');\n\n                    sources.push(src);\n\n                    var rule = {\n                        minWidth: minWidth\n                    };\n\n                    rules.push(rule);\n\n                    if (!minWidth) {\n                        defaultImageId = children.length - 1;\n                        element.children[i].style.display = 'block';\n                    } else {\n                        element.children[i].style.display = 'none';\n                    }\n                }\n            }\n\n            lastActiveImage = defaultImageId;\n\n            function check() {\n                var imageToDisplay = false, i;\n\n                for (i in children){\n                    if(!children.hasOwnProperty(i)) continue;\n\n                    if (rules[i].minWidth) {\n                        if (element.offsetWidth > rules[i].minWidth) {\n                            imageToDisplay = i;\n                        }\n                    }\n                }\n\n                if (!imageToDisplay) {\n                    //no rule matched, show default\n                    imageToDisplay = defaultImageId;\n                }\n\n                if (lastActiveImage != imageToDisplay) {\n                    //image change\n\n                    if (!loadedImages[imageToDisplay]){\n                        //image has not been loaded yet, we need to load the image first in memory to prevent flash of\n                        //no content\n\n                        var image = new Image();\n                        image.onload = function() {\n                            children[imageToDisplay].src = sources[imageToDisplay];\n\n                            children[lastActiveImage].style.display = 'none';\n                            children[imageToDisplay].style.display = 'block';\n\n                            loadedImages[imageToDisplay] = true;\n\n                            lastActiveImage = imageToDisplay;\n                        };\n\n                        image.src = sources[imageToDisplay];\n                    } else {\n                        children[lastActiveImage].style.display = 'none';\n                        children[imageToDisplay].style.display = 'block';\n                        lastActiveImage = imageToDisplay;\n                    }\n                } else {\n                    //make sure for initial check call the .src is set correctly\n                    children[imageToDisplay].src = sources[imageToDisplay];\n                }\n            }\n\n            element.resizeSensor = new ResizeSensor(element, check);\n            check();\n\n            if (trackingActive) {\n                elements.push(element);\n            }\n        }\n\n        function findResponsiveImages(){\n            var query = getQuery();\n\n            var elements = query('[data-responsive-image],[responsive-image]');\n            for (var i = 0, j = elements.length; i < j; i++) {\n                attachResponsiveImage(elements[i]);\n            }\n        }\n\n        var regex = /,?[\\s\\t]*([^,\\n]*?)((?:\\[[\\s\\t]*?(?:min|max)-(?:width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"[^\"]*?\"[\\s\\t]*?])+)([^,\\n\\s\\{]*)/mgi;\n        var attrRegex = /\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]/mgi;\n        /**\n         * @param {String} css\n         */\n        function extractQuery(css) {\n            var match;\n            var smatch;\n            css = css.replace(/'/g, '\"');\n            while (null !== (match = regex.exec(css))) {\n                smatch = match[1] + match[3];\n                attrs = match[2];\n\n                while (null !== (attrMatch = attrRegex.exec(attrs))) {\n                    queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);\n                }\n            }\n        }\n\n        /**\n         * @param {CssRule[]|String} rules\n         */\n        function readRules(rules) {\n            var selector = '';\n            if (!rules) {\n                return;\n            }\n            if ('string' === typeof rules) {\n                rules = rules.toLowerCase();\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n                    extractQuery(rules);\n                }\n            } else {\n                for (var i = 0, j = rules.length; i < j; i++) {\n                    if (1 === rules[i].type) {\n                        selector = rules[i].selectorText || rules[i].cssText;\n                        if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n                            extractQuery(selector);\n                        }else if(-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n                            extractQuery(selector);\n                        }\n                    } else if (4 === rules[i].type) {\n                        readRules(rules[i].cssRules || rules[i].rules);\n                    }\n                }\n            }\n        }\n\n        var defaultCssInjected = false;\n\n        /**\n         * Searches all css rules and setups the event listener to all elements with element query rules..\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.init = function(withTracking) {\n            trackingActive = typeof withTracking === 'undefined' ? false : withTracking;\n\n            for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n                try {\n                    readRules(document.styleSheets[i].cssRules || document.styleSheets[i].rules || document.styleSheets[i].cssText);\n                } catch(e) {\n                    if (e.name !== 'SecurityError') {\n                        throw e;\n                    }\n                }\n            }\n\n            if (!defaultCssInjected) {\n                var style = document.createElement('style');\n                style.type = 'text/css';\n                style.innerHTML = '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img { width: 100%;}';\n                document.getElementsByTagName('head')[0].appendChild(style);\n                defaultCssInjected = true;\n            }\n\n            findElementQueriesElements();\n            findResponsiveImages();\n        };\n\n        /**\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.update = function(withTracking) {\n            this.init(withTracking);\n        };\n\n        this.detach = function() {\n            if (!this.withTracking) {\n                throw 'withTracking is not enabled. We can not detach elements since we don not store it.' +\n                'Use ElementQueries.withTracking = true; before domready or call ElementQueryes.update(true).';\n            }\n\n            var element;\n            while (element = elements.pop()) {\n                ElementQueries.detach(element);\n            }\n\n            elements = [];\n        };\n    };\n\n    /**\n     *\n     * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n     *                               (no garbage collection possible if you don not call .detach() first)\n     */\n    ElementQueries.update = function(withTracking) {\n        ElementQueries.instance.update(withTracking);\n    };\n\n    /**\n     * Removes all sensor and elementquery information from the element.\n     *\n     * @param {HTMLElement} element\n     */\n    ElementQueries.detach = function(element) {\n        if (element.elementQueriesSetupInformation) {\n            //element queries\n            element.elementQueriesSensor.detach();\n            delete element.elementQueriesSetupInformation;\n            delete element.elementQueriesSensor;\n\n        } else if (element.resizeSensor) {\n            //responsive image\n\n            element.resizeSensor.detach();\n            delete element.resizeSensor;\n        } else {\n            //console.log('detached already', element);\n        }\n    };\n\n    ElementQueries.withTracking = false;\n\n    ElementQueries.init = function() {\n        if (!ElementQueries.instance) {\n            ElementQueries.instance = new ElementQueries();\n        }\n\n        ElementQueries.instance.init(ElementQueries.withTracking);\n    };\n\n    var domLoaded = function (callback) {\n        /* Internet Explorer */\n        /*@cc_on\n         @if (@_win32 || @_win64)\n         document.write('<script id=\"ieScriptLoad\" defer src=\"//:\"><\\/script>');\n         document.getElementById('ieScriptLoad').onreadystatechange = function() {\n         if (this.readyState == 'complete') {\n         callback();\n         }\n         };\n         @end @*/\n        /* Mozilla, Chrome, Opera */\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', callback, false);\n        }\n        /* Safari, iCab, Konqueror */\n        else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n            var DOMLoadTimer = setInterval(function () {\n                if (/loaded|complete/i.test(document.readyState)) {\n                    callback();\n                    clearInterval(DOMLoadTimer);\n                }\n            }, 10);\n        }\n        /* Other web browsers */\n        else window.onload = callback;\n    };\n\n    ElementQueries.listen = function() {\n        domLoaded(ElementQueries.init);\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ElementQueries;\n    }\n    else {\n        window.ElementQueries = ElementQueries;\n        ElementQueries.listen();\n    }\n})();"],"sourceRoot":"/source/"}